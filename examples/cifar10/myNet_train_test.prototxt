name:"myNet_train_test"
layer {
	name: "cifar"
	type: "Data"
	top: "data"
	top: "label"
	include {
		phase: TRAIN
	}
	transform_param {
		#mirror: true
		#crop_size: 227
		mean_file: "data/cifar10/mean.binaryproto"
	}
# mean pixel / channel-wise mean instead of mean image
#  transform_param {
#    crop_size: 227
#    mean_value: 104
#    mean_value: 117
#    mean_value: 123
#    mirror: true
#  }
	data_param {
		source: "examples/cifar10/cifar10_train_lmdb"
		batch_size: 100
		backend: LMDB
	}
}
ayer {
	name: "cifar"
	type: "Data"
	top: "data"
	top: "label"
	include {
		phase: TEST
	}
	transform_param {
		mean_file: "data/cifar10/mean.binaryproto"
	}
	data_param {
		source: "examples/cifar10/cifar10_test_lmdb"
		batch_size: 100
		backend: LMDB
	}
}
layer {
	name: "conv1"
	type: "Convolution"
	bottom: "data"
	top: "conv1"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param{
		num_output: 48
		kernel_size: 5
		stride: 1
		pad: 2
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filer {
			type: "constant"
		}
	}
}
layer {
	name: "relu1"
	type: "ReLU"
	bottom: "conv1"
	top: "conv1"
}
layer {
	name: "pool1"
	type: "Pooling"
	bottom: "conv1"
	top: "pool1"
	pooling_param{
		pool: MAX
		kernel_size: 3
		stride: 2
	}
}
layer{
	name: "norm1"
	type: "LRN"
	bottom: "pool1"
	top: "norm1"
	lrn_param {
		local_size: 5
		alpha: 0.0001
		beta: 0.75
	}
}
layer {
	name: "conv2"
	type: "Convolution"
	bottom: "norm1"
	top: "conv2"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param{
		num_output: 256
		kernel_size: 5
		stride: 1
		pad: 2
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filer {
			type: "constant"
		}
	}	
}
layer {
	name: "relu2"
	type: "ReLU"
	bottom: "conv2"
	top: "conv2"
}
layer {
	name: "pool2"
	type: "Pooling"
	bottom: "conv2"
	top: "pool2"
	pooling_param{
		pool: MAX
		kernel_size: 3
		stride: 2
	}
}
layer{
	name: "norm2"
	type: "LRN"
	bottom: "pool2"
	top: "norm2"
	lrn_param {
		local_size: 5
		alpha: 0.0001
		beta: 0.75
	}
}
layer {
	name: "conv3"
	type: "Convolution"
	bottom: "norm2"
	top: "conv3"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param{
		num_output: 384
		kernel_size: 3
		stride: 1
		pad: 1
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filer {
			type: "constant"
		}
	}		
}
layer {
	name: "relu3"
	type: "ReLU"
	bottom: "conv3"
	top: "conv3"
}
layer {
	name: "conv4"
	type: "Convolution"
	bottom: "conv3"
	top: "conv4"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param{
		num_output: 384
		kernel_size: 3
		stride: 1
		pad: 1
		}	
}
layer {
	name: "relu4"
	type: "ReLU"
	bottom: "conv4"
	top: "conv4"
}
layer {
	name: "conv5"
	type: "Convolution"
	bottom: "conv4"
	top: "conv5"
	param {
		lr_mult: 1
	}
	param {
		lr_mult: 2
	}
	convolution_param{
		num_output: 256
		kernel_size: 3
		stride: 1
		pad: 1
		weight_filler {
			type: "gaussian"
			std: 0.01
		}
		bias_filer {
			type: "constant"
		}
	}	
}
layer {
	name: "relu5"
	type: "ReLU"
	bottom: "conv5"
	top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
	lr_mult: 1
  }
  param {
	lr_mult: 2
  }
  inner_product_param {
    num_output: 64
	weight_filler {
		type: "gaussian"
		std: 0.01
	}
	bias_filer {
		type: "constant"
	}	
  }
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
	lr_mult: 1
  }
  param {
	lr_mult: 2
  }
  inner_product_param {
    num_output: 64
	weight_filler {
		type: "gaussian"
		std: 0.01
	}
	bias_filer {
		type: "constant"
	}
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8"
  param {
	lr_mult: 1
  }
  param {
	lr_mult: 2
  }
  inner_product_param {
    num_output: 10
	weight_filler {
		type: "gaussian"
		std: 0.01
	}
	bias_filer {
		type: "constant"
	} 
 }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}

